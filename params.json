{"name":"Mailcheck","body":"mootools.mailcheck.js\r\n=====================\r\n\r\nA rewrite of the jQuery plugin that suggests a right domain when your users misspell it in an email address.\r\n\r\n[![endorse](http://api.coderwall.com/dimitarchristoff/endorsecount.png)](http://coderwall.com/dimitarchristoff)\r\n\r\nWhat does it do?\r\n----------------\r\n\r\nWhen your user types in \"user@hotnail.con\", Mailcheck will suggest \"user@hotmail.com\".\r\n\r\n![diagram](http://github.com/Kicksend/mailcheck/raw/master/doc/example.png?raw=true)\r\n\r\nSee it live in action on this jsfiddle [here](http://jsfiddle.net/dimitar/jSn3e/).\r\n\r\n\r\nHow to use\r\n----------\r\n\r\nThis is low level, it works with an element but it does not attach events or handle suggestions.\r\nYou should extend the class to get that behavior or work with the instance.\r\n\r\nGet Mootools. Have a text field.\r\n\r\n```html\r\n<input id=\"email\" name=\"email\" type=\"text\" value=\"dimitar@gogolemail.com\" />\r\n```\r\n\r\nNow, attach Mailcheck to the text field. Remember to declare an array of domains you want to check against.\r\n\r\n```javascript\r\n// it can create an instance on the fly for you\r\nvar suggested = document.id(\"email\").get(\"mailcheck\").suggest();\r\nif (suggested) {\r\n    // do something with the object\r\n}\r\nelse {\r\n    // we have nothing!\r\n}\r\n```\r\n\r\n...or use a proper class instantiation as part of scripting:\r\n\r\n```javascript\r\n// it can create an instance on the fly for you\r\nvar mailcheck = new Mailcheck(document.id('email', {\r\n    domains: [\"hotmail.com\", \"gmail.com\", \"aol.com\"],\r\n    threshold: 2,\r\n    method: 'sift3' // sift3 or 'levenstein' (default)\r\n});\r\n\r\ndocument.id(\"email\").addEvent(\"change\", function() {\r\n    var suggested = mailcheck.suggest();\r\n    if (suggested) {\r\n        // do something with the object\r\n    }\r\n    else {\r\n        // we have nothing!\r\n    }\r\n});\r\n```\r\n\r\nA combination of both for quick scripting:\r\n\r\n```javascript\r\ndocument.id(\"email\").addEvent(\"change\", function() {\r\n    // create a class instance if it does not exist...\r\n    var suggested = this.get(\"mailcheck\").suggest();\r\n    if (suggested) {\r\n        // do something with the object\r\n    }\r\n    else {\r\n        // we have nothing!\r\n    }\r\n});\r\n```\r\n\r\n`suggested` is an object with the following properties:\r\n\r\n    {\r\n      user: 'dimitar',               // the address; part before the @ sign\r\n      domain: 'googlemail.com',      // the suggested domain\r\n      full: 'dimitar@googlemail.com' // the full suggested email\r\n    }\r\n\r\n`false` is returned when we don't know what to suggest.\r\n\r\nMethodology\r\n-----------\r\nMailcheck currently supports the [sift3](http://siderite.blogspot.com/2007/04/super-fast-and-accurate-string-distance.html) string similarity / distance algorithm by [Siderite](http://siderite.blogspot.com/) and\r\n`String.levenstein`, though the results may vary slightly. Levenstein is now the default as a more reliable result.\r\n\r\nTests\r\n-----\r\n\r\nVia Buster.js, go to `test/index.html` to run.\r\n\r\nYou can also test via node. To install buster:\r\n\r\n    # npm install -g buster\r\n    \r\nTo start the static tester:    \r\n    \r\n    # buster static\r\n    \r\nTo start in capture mode for multiple browsers:\r\n\r\n    # buster server &\r\n\r\nOnce you have captured your target browsers, just run:\r\n\r\n    # buster test\r\n\r\nMore details on testing in `the tests/README.md`, including examples.\r\n\r\nCredits\r\n-------\r\n\r\n- Original plugin / idea by Derrick Ko ([@derrickko](http://twitter.com/derrickko))\r\n\r\nLicense\r\n-------\r\n\r\nLicensed under the MIT License. You are not allowed to [use mailcheck for evil](http://www.youtube.com/watch?v=-hCimLnIsDA)","tagline":"Popular email domain spelling suggester / corrector via String distance and an array of known domains. For MooTools","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}